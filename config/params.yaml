# This file contains the default configuration for the node

# General parameters
common:
  topics:
    input:
      points: "/velodyne_points"
    output:
      ground: "/ftfcd/debug/ground"
      clusters: "/ftfcd/debug/clusters"
      observations: "/AS/P/ftfcd/observations"

manager:
  publish_debug: true                         # Publish debug information

dbscan:                                       # DBSCAN algorithm (check there are 2 implementations of the algorithm in the code)
  eps: 0.8                                    # Epsilon value for the DBSCAN algorithm
  minPts: 2                                   # MinPts for core points (both implementations)
  maxPts: 150                                  # Max number of points for the DBSCAN algorithm (second implementation)
  classification:
    distX: 0.4
    distY: 0.4
    distZ: 0.4

ransac:
  ground_segmentation_mode: true              # True: Ransac / False: Linefit
  publish_ground: true                        # Publish ground
  publish_obstacle: true                      # Publish obstacle
  minz: -3                                    # min z value of the point cloud
  maxz: 0.7                                     # max z value of the point cloud
  max_x: 30                                   # max x value of the point cloud
  max_y: 15                                   # max y value of the point cloud
  min_y: -15                                  # min y value of the point cloud
  x_car_limit_p: 0.3                          # The 4 values of car limit are because
  x_car_limit_n: -0.3                         # there are parts of the car that are always
  y_car_limit_p: 0.3                          # reached by the LiDAR laser beams and same position
  y_car_limit_n: -0.3                         # No need to look for them always
  max_iterations: 200                         # max iterations of the ransac algorithm (https://en.wikipedia.org/wiki/Random_sample_consensus)
  dist_threshold: 0.1                         # distance threshold of the ransac algorithm   s'ha de quedar a 0.1 sino els cons perden massa punts
  plane_angle: 0.30                           # max angle of the plane 
  vis_outliers: false                         # visualize outliers

state:
  initial_gravity: [0.0, 0.0, 9.807]
  I_Translation_L: [1.10, 0.0, 0.05] #[1.10, 0.0, 0.05]
  I_Rotation_L: [
      0.998,  0.0,  0.052,
      0.0, 1.0,  0.0,
      -0.052, 0.0, 0.998
  ]

point:
  full_rotation_time: 0.1
  offset_beginning: true     # (Xaloc's value, having a modified Velodyne LiDAR driver, is 'true') Is the offset with respect the beginning of the rotation (i.e. point.time ~ [0, 0.1]) or with respect the end (i.e. point.time ~ [-0.1, 0])? For more information see Issue #14: https://github.com/Huguet57/LIMO-Velo/issues/14

accumulator:
  real_time_delay: 0.1       # Should be at least [FULL_ROTATION_TIME] (without a modificated LiDAR driver)
  imu_rate: 400
  Initialization:
    times: [0.5, 1.0, 1.25]
    deltas: [0.1, 0.05, 0.02]
  full_rotation_time: 0.1
  real_time: true

lidar:
  LiDAR_type: velodyne
  stamp_beginning: false     # (As usual, 'false') Is the pointcloud's stamp the last point's timestamp (end of rotation) or the first's (beggining of rotation)?
  min_dist: 1.5
  downsample_rate: 1         # Downsampling rate: results show that this one can be up to 32 and still work, try it if you need a speedup
  empty_lidar_time: 0.1      # Should be at least [FULL_ROTATION_TIME]
  downsample_prec: 0.5       # Downsampling precision: Indoors, lower values (~0.2) work better. Outdoors, higher values (~0.5) lead to less degeneracy.

